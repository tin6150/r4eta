r4eta
=====

Building and running the R container for ETA
Notes that have been removed from README.txt


container sizes
---------------

(before Jupyter server)

myR has rstudio binary, but  w/o Qt: 1.7G in singularity
myR with Qt Libs needed by rstudio:  1.9G in singularity
docker last layer only:
tin6150/r4eta            latest              dd66fe981035        43 hours ago        4.89GB
in docker, largest layer about 1.7 GB?





Docker build, run and troubleshoot example
------------------------------------------

	docker build -t tin6150/r4eta -f Dockerfile .  | tee Dockerfile.monolithic.log
	docker push     tin6150/r4eta
	docker run  -it --entrypoint=bash   tin6150/r4eta

	docker run  -it -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME:/tmp/home  --user=$(id -u):$(id -g) tin6150/r4eta
	docker run  -it --entrypoint /usr/bin/Rscript -v $HOME:/tmp/home  --user=$(id -u):$(id -g) tin6150/r4eta -e 'capabilities()'
	docker run  -it --entrypoint /bin/bash  --user=$(id -u):$(id -g) tin6150/r4eta
	docker exec -it boring_home  bash


Docker build in GitHub Container Registry
-----------------------------------------

	// 2021.0829 
	// since hub.docker not longer do auto cloud build for free account.  
	// changed to use github action to build and publish this container, 
	// then manually push to hub.docker 

	docker pull ghcr.io/tin6150/r4eta:master
	docker tag cc50ee4598df tin6150/r4eta:v0829  
	docker push             tin6150/r4eta:v0829  # R 3.6.3 # build on 2021.0829
	docker tag 19848752d40d tin6150/r4eta:v411   
	docker push             tin6150/r4eta:v411   # R 4.1.1 # build on 2021.0831

Example running R script via Docker
-----------------------------------

docker run                -it --entrypoint=Rscript   ghcr.io/tin6150/r4eta:master   /opt/gitrepo/r4eta/drJin.R       # R script inside the container
docker run -v "$PWD":/mnt -it --entrypoint=Rscript   ghcr.io/tin6150/r4eta:master   /mnt/drJin.R   # R script in home dir, bind mounted to container
docker run                -it --entrypoint=bash      ghcr.io/tin6150/r4eta:master   # running a bash shell, can call R from there
docker run                -it --entrypoint=bash      tin6150/r4eta:v0829            # version manually pushed to hub.docker

Example running R script via Singularity
----------------------------------------

	singularity pull  docker://ghcr.io/tin6150/r4eta:master
	singularity shell docker://ghcr.io/tin6150/r4eta:master  # get bash prompt
	singularity run   docker://ghcr.io/tin6150/r4eta:master  # get R    prompt
	singularity exec  docker://ghcr.io/tin6150/r4eta:master  Rscript ./drJin.R                    # R script in current working dir
	singularity exec  docker://ghcr.io/tin6150/r4eta:master  Rscript /opt/gitrepo/r4eta/drJin.R   # R script inside container


convert jupyter notebook to .py
-------------------------------

essentially, need to run:
jupyter nbconvert --to script /global/data/transportation/ATLAS/static/urbansim_hima_apollo/data_clean/data\ clean.ipynb

cd  /global/data/transportation/ATLAS/static/urbansim_hima_apollo/data_clean/
docker run -it --entrypoint=/opt/conda/bin/jupyter  -v `pwd`:/mnt tin6150/r4envids nbconvert --to script /mnt/data_clean.ipynb

-or-

docker run -it --entrypoint=bash  -v `pwd`:/mnt tin6150/r4envids 
  cd /mnt 
  /opt/conda/bin/jupyter/nbconvert --to script data_clean.ipynb




rstudio Qt GUI via docker
-------------------------

Singularity is actually a lot more straightforward in this regard (see above), since everything is run as a user process without uid change.  Docker needs to map a number of environments before a GUI can be run:

  xhost +
	docker run  -it -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v /tmp/.docker.xauth:/tmp/.xauth -v $HOME:/tmp/home  --entrypoint rstudio tin6150/r4eta

need to run rstudio with root, so can't use the --user=$(id -u) cuz it needs to a web server...



Troubleshooting if GUI doesn't lauch:
  
Instead of rstudio, can execute xterm or qterminal 
as a lighter test to check whether X11 is working for the container.  
The capabilities() function in R should report X11 as TRUE.
Running `xhost +` on the host may help.
Change :0 to whatever DISPLAY session you maybe using, or omit it altogether.

  XSOCK=/tmp/.X11-unix && XAUTH=/tmp/.docker.xauth && xauth nlist :0 | sed -e "s/^..../ffff/" | xauth -f $XAUTH nmerge - && docker run  -v $XSOCK:$XSOCK -v $XAUTH:$XAUTH -e XAUTHORITY=$XAUTH  -e DISPLAY=$DISPLAY --rm -it  tin6150/r4eta  R -e "capabilities()"

should produce output like:

> capabilities()
     jpeg        png        tiff       tcltk         X11       aqua 
     TRUE        TRUE        TRUE        TRUE        TRUE     FALSE 

     http/ftp    sockets     libxml      fifo      cledit     iconv 
     TRUE        TRUE        TRUE        TRUE       FALSE      TRUE 

     NLS         profmem     cairo        ICU long.double   libcurl 
     TRUE        TRUE        TRUE        TRUE        TRUE      TRUE 


~~~~

docker run  -it -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME:/tmp/home                            -p 8787:8787 -e PASSWORD=yourpasswordhere   --entrypoint rstudio tin6150/r4eta  # rootless docker, actually need to run as root 

docker run  -it -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME:/tmp/home  --user=$(id -u):$(id -g)  -p 8787:8787 -e PASSWORD=yourpasswordhere   --entrypoint rstudio tin6150/r4eta

docker run  -it -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME:/tmp/home  --user=$(id -u):$(id -g) --entrypoint xterm tin6150/r4eta


~~~~

maybe rename repo to r4gis (but not r4ds, cuz like R wasn't going to be used for data science work?!)


# vim: nosmartindent tabstop=4 noexpandtab shiftwidth=4 paste
